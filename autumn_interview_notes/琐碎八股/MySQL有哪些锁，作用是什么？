| 锁类型                 | 简要定义              | 项目中典型使用场景                                                |
| ------------------- | ----------------- | -------------------------------------------------------- |
| **全局锁**             | 锁住整个数据库，只读           | 项目部署前全库逻辑备份，使用 `FLUSH TABLES WITH READ LOCK` 防止数据变更造成不一致 |
| **表锁**              | 锁整张表，MyISAM 默认           | 管理后台导出大表数据，短时间只读锁表防止写入（`LOCK TABLES table_name READ`）    |
| **元数据锁（MDL）**       | 锁表结构元信息，防止 DDL 冲突 | 线上变更字段，卡住其他读写请求，避免“写时改结构”出错                              |
| **意向锁**             | 表级锁，用于协调行锁/表锁       | 高并发下事务需判断是否能加排他锁（例如：一次性锁表更新）                             |
| **AUTO-INC 锁**      | 控制自增列插入唯一性             | 多线程导入订单记录，自增主键必须唯一（如订单号）                                 |
| **记录锁 Record Lock** | 锁单条索引记录                 | 用户修改个人资料，锁定 user 表中某条记录避免并发写入                            |
| **间隙锁 Gap Lock**    | 锁索引间隙，防止幻读           | 同一事务中查询 `id > 100 and id < 200`，避免别的事务插入 id=150          |
| **Next-Key Lock**   | 间隙 + 记录锁组合                | 防止幻读且精确控制范围更新，例如“更新成绩在70\~90之间的用户”                       |
| **插入意向锁**           | 事务表示想在某个间隙插入      | 秒杀场景并发插入订单，如果插入位置不冲突，不互相等待                               |




全局锁： 锁住整个数据库实例，使数据库只读，用于全库备份。

🚪 一、MySQL 各类锁总结 + 项目场景应用
全局锁	锁住整个数据库，只读	项目部署前全库逻辑备份，使用 FLUSH TABLES WITH READ LOCK 防止数据变更造成不一致
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
表锁	锁整张表，MyISAM 默认	管理后台导出大表数据，短时间只读锁表防止写入（LOCK TABLES table_name READ）

表锁 不是只有 MyISAM 才用，所有存储引擎都可以使用表锁（如通过 LOCK TABLES 手动加锁），只是：

MyISAM 默认只支持表锁，不支持行锁。
而 InnoDB 支持更细粒度的行锁，也支持表锁（通过显式 LOCK TABLES）。

 LOCK TABLES xxx READ 的作用
✅ 允许当前线程 读取表的数据（SELECT）。

❌ 禁止当前线程以外的线程 对该表执行 SELECT/INSERT / UPDATE / DELETE / ALTER 等写操作。

❌ 当前线程自己也不能对表执行写操作（除非使用 READ LOCAL，但那又是另一种情况）。

会话 A：

LOCK TABLES product READ;
SELECT * FROM product;  -- ✅ 可以执行
UPDATE product SET price = 100 WHERE id = 1;  -- ❌ 不允许，即使是自己

🧪 实验演示（InnoDB）
会话 A：

LOCK TABLES product READ;
会话 B：

SELECT * FROM product;

-- ⏳ 会卡住，直到 A 执行 UNLOCK TABLES
因为 MySQL 的表锁是显式加锁（不区分是读还是写线程），
除非你使用 READ LOCAL 锁模式，它允许其他线程执行非正在修改的 MyISAM 表的 SELECT 操作（仅限 MyISAM）。
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
