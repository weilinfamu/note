底层原理简化
1. 运算符本质上就是函数
在C++中，所有运算符实际上都可以被视为特殊命名的函数：
cpp// 这两行代码完全等价
a = b;
a.operator=(b);  // 这是实际调用的函数


2. 对象拷贝与移动的本质

拷贝：创建资源的完整副本（如复印一份文件）
移动：转移资源的所有权（如把文件直接给别人，自己不再拥有）

3. 右值引用(&&)的本质
&&表示"即将消亡的对象"，告诉编译器："这个对象马上就不需要了，可以偷走它的资源"
实用的记忆方法


1. 通过模式记忆
大多数C++类遵循相似的模式，记住这些模式比记单个语法更有效：

禁止拷贝模式:
cppClassName(const ClassName&) = delete;
operator=(const ClassName&) = delete;

允许移动模式:
cppClassName(ClassName&&) noexcept { /* 移动构造 */ }
operator=(ClassName&&) noexcept { /* 移动赋值 */ }

