 Linux 文件权限体系：三种用户角色

----------------------------------------------------------------------------------------------------------
每个文件或目录在 Linux 中，都对应三个权限主体：

角色	  标识	含义
所有者	user	创建该文件的用户（如你：rc）
所属组	group	文件所属的用户组（也可以是 rc）
其他用户	other	系统中所有不是该用户、也不在该组的人
----------------------------------------------------------------------------------------------------------
✅ 所属组（group）是啥？
所属组是一个用户组，表示一组用户对该文件共享某种权限。

-rwxr-xr-x 1 rc rc 28688 May 24 16:31 exercise.out
       ↑  ↑
       │  └── 所属组：rc
       └──── 所有者：rc

exercise.out 的所有者是 rc
exercise.out 的所属组也是 rc
组内权限是 r-x：可以读、执行但不能修改

✅ 所属组的作用：
✔️ 举例场景：
假设你公司一个开发组 devs，有 3 个成员：
sudo groupadd devs
sudo usermod -aG devs alice
sudo usermod -aG devs bob
sudo usermod -aG devs charlie

你创建一个组文件：

touch report.txt
chgrp devs report.txt           # 改所属组
chmod 640 report.txt            # rw-r-----（user rw, group r, other -）

你能读写（rw-）
devs 组内的其他人只能读（r--）
非组内用户完全不能访问（---）
✅ 怎么查看我所在的组？


groups
示例输出：

rc : rc sudo devs docker
你是 rc 用户，属于多个组。

----------------------------------------------------------------------------------------------------------

✅ 怎么改文件所属组？

sudo chgrp 新组名 文件名
比如：
sudo chgrp devs exercise.out
----------------------------------------------------------------------------------------------------------
✅ 2. chgrp devs report.txt
➤ 含义：
改变文件的「所属组」（group）为 devs。

默认情况下：

ls -l report.txt
# 可能是：-rw-r--r-- 1 rc rc ...
#                    ↑   ↑
#                  所有者 所属组
执行后：


-rw-r--r-- 1 rc devs ...
所有者仍是 rc

所属组变成 devs

⚠️ 如果你不是组 devs 的成员或不是文件的所有者，需要加 sudo：

sudo chgrp devs report.txt
----------------------------------------------------------------------------------------------------------
✅ 3. chmod 640 report.txt
➤ 含义：
设置文件权限为 rw-r-----：

6 = 4+2 → 拥有者有 rw-（读写）
4 = 4 → 所属组有 r--（只读）
0 = 0 → 其他人无权限
-rw-r-----  report.txt



