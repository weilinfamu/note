✅ 举个例子：GDB 中栈帧展开
你运行这段代码：

int main() {
    TreeNode* root = buildTestTree();
    Solution sol;
    TreeNode* result = sol.searchBST(root, 7);
    return 0;
}


------------------------------------------------------------------------------------
会得到如下的函数栈结构（GDB 的 backtrace 或 bt 命令看到的）：
#0  searchBST(TreeNode* root=7, val=7)
#1  searchBST(TreeNode* root=5, val=7)
#2  searchBST(TreeNode* root=10, val=7)
#3  main()

------------------------------------------------------------------------------------
也就是说先压的在最后面...
一步一步向上


------------------------------------------------------------------------------------

我们再一步一步整理一遍，然后我来给你完整模拟函数调用 + 回溯的栈过程图，再贴上你要的完整 searchBST 函数。

✅ 函数调用 = 压栈
每次调用 searchBST(...) → 会把当前函数的参数、局部变量、返回地址等信息压入栈帧

✅ 函数 return = 弹栈（回溯）
函数 return 之后 → 当前栈帧会被销毁，控制权回到上一个函数（也就是“调用它的人”）

🧠 所以递归的本质：
“一层层调用压栈直到触底，然后一层层返回弹栈（这就是回溯）”

