CMake 是必须掌握的！
------------------------------------------------------------------------------------
尤其在大型工程、嵌入式开发、多平台移植、工程模块化这些场景，CMake 是“工程管理的核心”。
------------------------------------------------------------------------------------
✅ 你需要掌握 CMake 的哪些知识点？
------------------------------------------------------------------------------------
✅ 1. CMake 的基本语法结构：
知识点	示例	        说明
cmake_minimum_required(VERSION 3.10)	✅	指定最低版本
project(MyProject)	                  ✅	设置工程名
add_executable(name src1 src2...)	    ✅	生成可执行程序
add_library(name STATIC/SHARED src...)	✅	创建静态/动态库
target_link_libraries(...)	          ✅	链接库
------------------------------------------------------------------------------------
✅ 2. 编译多个文件
📄 结构：
src/
├── main.cpp
├── foo.cpp
├── foo.h

CMake 干的事：告诉编译器怎么把一堆 .cpp 文件编译成一个可执行程序/库
------------------------------------------------------------------------------------
✅ 示例目录结构

project/
├── CMakeLists.txt      ← CMake 配置文件
├── src/                ← 源代码目录
│   ├── main.cpp
│   ├── foo.cpp
│   └── foo.h

✅ 最简单的写法：
add_executable(myApp main.cpp foo.cpp)
🔍 拆解解释：
部分	                含义
add_executable	  表示要生成一个可执行程序
myApp	            你要生成的程序名字（最终是 ./myApp）
main.cpp foo.cpp	需要参与编译的源文件列表
------------------------------------------------------------------------------------
✅ 更专业写法（自动包含当前目录下所有 .cpp 文件）
file(GLOB SRC *.cpp)
add_executable(myApp ${SRC})
------------------------------------------------------------------------------------
file(GLOB SRC *.cpp)
部分	            含义
file(...)	    CMake 的文件命令
GLOB	        表示使用通配符来查找文件
SRC	        📌 变量名，你自定义的，用于接收文件列表（不是目录）
*.cpp	        当前 CMakeLists.txt 所在目录下，所有 .cpp 文件
------------------------------------------------------------------------------------














