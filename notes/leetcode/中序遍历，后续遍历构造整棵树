 从中序与后序遍历序列构造二叉树

给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。

示例 1:


输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
输出：[3,9,20,null,null,15,7]
示例 2:

输入：inorder = [-1], postorder = [-1]
输出：[-1]
 

提示:

1 <= inorder.length <= 3000
postorder.length == inorder.length
-3000 <= inorder[i], postorder[i] <= 3000
inorder 和 postorder 都由 不同 的值组成
postorder 中每一个值都在 inorder 中
inorder 保证是树的中序遍历
postorder 保证是树的后序遍历


🧠 一、你要记住的前提知识（关键点）
✅ 后序遍历：左 → 右 → 根
所以后序遍历数组的最后一个元素就是根节点

✅ 中序遍历：左 → 根 → 右
所以我们一旦知道根节点值，就可以用中序数组把左右子树分开
------------------------------------------------------------------------------

什么是层序遍历：
🧠 什么是层序遍历（Level Order）？
从根节点开始，一层一层从左到右输出所有节点。

比如你构建出的树是这样：

        3
       / \
      9   20
         /  \
       15    7
-------------------------------------------------
🌲 层序遍历流程：
第 0 层：3

第 1 层：9, 20

第 2 层：null, null, 15, 7

最终按层输出所有节点值（用 null 表示空子节点）：
[3, 9, 20, null, null, 15, 7]

-----------------------------------------------------------
🌳 给定的中序 + 后序 + 前序遍历：
inorder    = [9,3,15,20,7]
postorder  = [9,15,7,20,3]
preorder = [3, 9, 20, 15, 7]

------------------------------------------------------------------------------------------------------------------------

我们需要来进行切割：
首先是切割的是：
因为3很好在后续遍历里面找到as a root，
又因为：后序数组没有“像中序那样的明确切点”，
我们只能通过“中序切出来的左边长度”，来反推出后序的切割点！

所以我们之后以3为起点在 inorder 进行切割
左子树就是 ：
 9
root as :3
右子树就是 :12 20 7

然后就是最难的，注意这里！！！！：

这就是为啥要根据inorder的  左枝来进行一个 切分 postorder:

🧠 逻辑根本在于：
中序遍历顺序：左 → 根 → 右
→ 所以你知道根在中序位置 k
→ 你就知道左子树有 k 个节点

后序遍历顺序：左 → 右 → 根
→ 最后一个是根，已经用掉了
→ 前面的前 k 个，就必须是左子树的节点！

🔗 这就是“通过中序中左边的节点个数 k，去反推后序中左子树的范围”的核心原理。

-----------------------------------------------------------------------------------
















