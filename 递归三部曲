递归三部曲：
1：确定递归函数的参数以及返回值
2：确定终止条件
3：确定单层递归的逻辑
e.g:
class Solution {
public:
    bool compare(TreeNode* left, TreeNode* right) {
        // 首先排除空节点的情况
        if (left == NULL && right != NULL) return false;
        else if (left != NULL && right == NULL) return false;
        else if (left == NULL && right == NULL) return true;
        // 排除了空节点，再排除数值不相同的情况
        else if (left->val != right->val) return false;

        // 此时就是：左右节点都不为空，且数值相同的情况
        // 此时才做递归，做下一层的判断
        bool outside = compare(left->left, right->right);   // 左子树：左、 右子树：右
        bool inside = compare(left->right, right->left);    // 左子树：右、 右子树：左
        bool isSame = outside && inside;                    // 左子树：中、 右子树：中 （逻辑处理）
        return isSame;

    }
    bool isSymmetric(TreeNode* root) {
        if (root == NULL) return true;
        return compare(root->left, root->right);
    }
};

注意，递归是完全注重筛选的，因此，俩return ... 最后一个是回溯最后在栈中return的起点，逐步上层，之后都是在判断这些：

常见错误：你遇到的这个报错是非常典型的递归判断错误：

❌ 报错解释（看图中这句）：
cpp
Copy
Edit
if(left->val != right->val) return false;
报错信息：

txt
Copy
Edit
runtime error: member access within null pointer of type 'TreeNode'
✅ 错误原因：
你在 未判断指针是否为 nullptr 的前提下，直接访问了：

cpp
Copy
Edit
left->val 或 right->val
🔥 举例触发错误的情形：
比如你递归到了这样一对：

cpp
Copy
Edit
left = nullptr
right = TreeNode(3)
你直接去访问 left->val，结果就是 空指针解引用 → 程序崩溃！

✅ 正确顺序：必须先判断 null，再访问 val
你的顺序现在是：

cpp
Copy
Edit
if(left->val != right->val) return false;  ❌
正确顺序应该是：

cpp
Copy
Edit
if (!left && right) return false;
if (left && !right) return false;
if (!left && !right) return true;
if (left->val != right->val) return false;  // ✅ 现在才安全
📌 小口诀帮助你记：
“先判空，再比值；不判空，炸程序！”






注意这些个，进行init的时候的覆盖问题了：

“
✅ 错误核心：
你在这行里写了一个局部变量，而不是用你上面声明的 result：

int result = max(depth, result); // ❌ 错误！这是局部变量 result
📌 你以为在更新全局 result，但实际上你是：
声明了一个新的 int result（局部）

然后它立刻被丢弃

全局的 result 根本没被更新！

✅ 正确做法：不要重新声明 int result
你应该直接写：

result = max(depth, result);  // ✅ 修改类的成员变量 result
❗附加问题：
还有一点需要注意：

int result = 0;
int depth = 1;
你在 maxDepth() 函数内部又定义了一个局部 result，这也会覆盖类成员变量。

所以你实际 return 的也是局部变量！
”
