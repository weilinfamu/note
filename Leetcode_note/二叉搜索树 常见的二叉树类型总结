二叉搜索树是一个有序树：

若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
它的左、右子树也分别为二叉搜索树

--------------------------------------------------------------------------------

这就决定了，二叉搜索树，递归遍历和迭代遍历和普通二叉树都不一样。


--------------------------------------------------------------------------------
你说得对，二叉搜索树（BST）的关键性质确实是：
左子树所有节点 < 根节点 < 右子树所有节点
不过，并不是所有“看起来像”有顺序的二叉树都叫 BST。
让我们来分类总结常见的各种“二叉树”，并指出它们的特性和区别，帮你理清楚这个森林一样的家族 🌳
--------------------------------------------------------------------------------
🌲 常见的二叉树类型总结
名称	是否有序	是否平衡	特点
普通二叉树	❌ 无序	❌ 不平衡	每个节点最多有两个孩子，无其他限制
二叉搜索树（BST）	✅ 有序	❌ 不一定平衡	左 < 根 < 右，便于查找、插入、删除
平衡二叉搜索树（如 AVL）	✅ 有序	✅ 平衡	在 BST 基础上，左右子树高度差 ≤1，搜索时间最优（log n）
红黑树	✅ 有序	✅ 近似平衡	一种自平衡 BST，插入删除效率更高，用于 Java/C++ STL
完全二叉树	❌ 无序	✅ 结构完整	除最后一层外全部满，最后一层从左往右填满
满二叉树	❌ 无序	✅ 所有节点都有 0 或 2 个子节点	完整对称，但无序
完美二叉树（Perfect Binary Tree）	❌ 无序	✅ 所有层都满，且满二叉树	极端结构，理论用得多
堆（最大堆 / 最小堆）	✅ 根与子有序（非整棵树有序）	✅ 一般为完全二叉树	最大堆：父 > 子；最小堆：父 < 子；非全局排序，仅局部


--------------------------------------------------------------------------------
普通二叉树
   3
  / \
 5   1     ← 没有规律，不是 BST
--------------------------------------------------------------------------------
二叉搜索树（BST）

   5
  / \
 3   8     ← 左 < 根 < 右
--------------------------------------------------------------------------------
AVL 树（平衡 BST）
    5
   / \
  3   8
 /       \
1         9   ← BST + 左右子树高度差不超 1

--------------------------------------------------------------------------------
最大堆（非 BST）
    9
   / \
  7   8
 / \
3   6     ← 父 > 子，但不满足 BST 左 < 根 < 右
--------------------------------------------------------------------------------
📌 总结重点
BST 是有序的，但不一定是平衡的。
----------------------------------------------------------------------------------------------------------------------------------------------------------------
AVL / 红黑树 是自平衡 BST，是为了避免 BST 退化成链表。
----------------------------------------------------------------------------------------------------------------------------------------------------------------
堆是部分有序（局部父子有序），但不是 BST。

完全/满/完美二叉树讲的是结构，不讲值大小顺序。

你理解得不错 —— AVL 确实也是一种 BST，但它加了“平衡”限制。 所以 AVL 树既有 BST 的有序性，又有快速查找的性能保证。




