
给定二叉树的根节点 root ，返回所有左叶子之和。

 

示例 1：



输入: root = [3,9,20,null,null,15,7] 
输出: 24 
解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24
示例 2:

输入: root = [1]
输出: 0
 

提示:

节点数在 [1, 1000] 范围内
-1000 <= Node.val <= 1000
 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(!root) return 0;
        queue<TreeNode*>que;
        que.push(root);
        int count = 0;
        while(!que.empty())
            {   
                int size = que.size();
                for(int i = 0; i <size;i++)
                    { TreeNode*node = que.front();que.pop();
                        if(node->left){
                            que.push(node->left);
                        }
                        if(!node->left && !node->right && i == 0){
                            count += node->val;
                        }
                        if(node->right){
                            que.push(node->right);
                        }
                    }
            }
    return count;
    }
};




🧠 错误理解的图：i == 0 是不是左子节点？
我们用你题目中的示例树：

markdown
Copy
Edit
      3
     / \
    9   20
       /  \
      15   7
对应的结构层序编号大致是这样（按 BFS 遍历顺序）：

层次	节点顺序	i == 0 的含义
0	3	第一层第一个节点 ✔️（根）
1	9, 20	这一层中 i==0 是 9，但这只是“从左到右遍历”第一个节点，不代表它是“某个节点的左子节点”
2	15, 7	i==0 是 15，但其实是 20 的左子节点

❌ 为什么不能说 “i == 0 就是左子节点”？
看这一层：

cpp
Copy
Edit
当前层 queue = [15, 7]
         ↑    ↑
        i=0  i=1
你说 i == 0 是左子节点，但你怎么知道它是“谁”的左子节点？

queue 里是孤立节点，根本没有“父子”信息！

BFS 不会记住是谁 push 这个节点进来的

✅ 正确判断“左子节点”的方式
我们在访问当前 node 时，明确知道它的 left 和 right 是谁：






if (node->left) {
    if (!node->left->left && !node->left->right) {
        count += node->left->val;  // 确认它是“左叶子”
    }
    que.push(node->left);
}
💡 这就叫“从父节点的视角看左孩子是不是叶子”，而不是“BFS队列中的第一个节点就一定是左子节点”。

🖍️ 草图示意（BFS 的错误理解 vs 正确方式）
❌ 错误理解（i == 0）：
yaml
Copy
Edit
BFS queue 一层层访问：
layer 1: [3]        ← i = 0 是根，不一定是左孩子
layer 2: [9, 20]    ← i = 0 是 9，但无法确认是“谁的”左孩子
layer 3: [15, 7]    ← i = 0 是 15，也无法判断
✅ 正确方式：
cpp
Copy
Edit
node = 20;
node->left = 15;  // 知道是左孩子！
if (15 是叶子) → 记录进答案
✅ 最终总结一句话：
“左叶子”的定义，是某个节点的 left 并且这个 left 是叶子；不是“BFS 一层里最左边的节点”。

