✅ 一、两种递归写法场景对比
场景类型	常用于	写法逻辑
搜索一条路径	找一个点 / 找一条路径（如找目标节点）	递归时只要找到就立刻返回，不再继续
遍历整个树	求所有路径、统计、收集结果等	要完整遍历整个左右子树，再综合处理结果


--------------------------------------------------------------------------------------------------------------
✅ 二、先看“搜索一条路径”的写法
📌 场景举例：找到一个目标节点/值，或者找到一条合法路径就够了

bool dfs(TreeNode* root) {
    if (root == NULL) return false;
    
    if (root->val == target) return true; // 找到了目标

    if (dfs(root->left)) return true;     // 只要左边找到了，直接返回
    if (dfs(root->right)) return true;    // 否则看右边

    return false;                         // 两边都没找到
}
🔍 特点：
✅ 找到就 return，不再管后面

❌ 不处理左右返回值（因为只关心有没有一条成功路径）
--------------------------------------------------------------------------------------------------------------
✅ 三、“搜索整个树”的写法
📌 场景举例：统计结果 / 查找公共祖先 / 求子树之和 等

bool dfs(TreeNode* root) {
    if (root == NULL) return false;

    bool left = dfs(root->left);    // 继续递归遍历左边
    bool right = dfs(root->right); // 再递归遍历右边

    // 👇结合左右子树的返回值进行处理
    if (left && right) return true;

    return left || right;
}

--------------------------------------------------------------------------------------------------------------

✅ 四、总结对比表
特性	      搜索一条路径型	                      搜索整棵树型
停止时机  	一找到目标就立即 return	              必须遍历完整棵树
是否处理左右返回值	否，    只做 if (递归()) return	  是，保存左右结果再处理
使用场景	找路径、找目标、早退出类问题	                  统计类、全局最值、LCA等问题

--------------------------------------------------------------------------------------------------------------
✅ 举例说明区别
❌ 错误：这样写只能找一个点，不是找公共祖先
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if (root == NULL) return NULL;
    if (root == p || root == q) return root;

    if (lowestCommonAncestor(root->left, p, q)) return ... ; // ❌ 没处理 right
    if (lowestCommonAncestor(root->right, p, q)) return ... ;
}

--------------------------------------------------------------------------------------------------------------

TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if (root == NULL || root == p || root == q) return root;

    TreeNode* left = lowestCommonAncestor(root->left, p, q);
    TreeNode* right = lowestCommonAncestor(root->right, p, q);

    if (left && right) return root;  // p、q分别在两侧
    return left ? left : right;
}





